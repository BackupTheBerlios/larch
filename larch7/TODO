locale handling on larchify /?

Documentation for new initramfs features (LABEL/UUID booting?)

Initramfs generation and kernel kernel updating:
 The 'normal' mechanism is used, via 'mkinitcpio -p kernel26${KERNEL_NAME}'
so if a custom kernel is used (KERNEL_NAME!=""), some adjustment will
be necessary ... (???)
 In larch-live there is a replacement kernel26.preset (kernel26.preset.larch),
which larch will copy to kernel26.preset, moving the original version to
kernel26.preset.larchsave. But remember when installing with larchin, the
first choice of file should be kernel26.preset.pacsave (?) before
kernel26.preset.larchsave.

Removal of dynamic initscript modifications (called from /etc/inittab)
can be removed when new initscripts package (with hooks) is released.

Gather together and document clearly all the bits of standard Arch that
larch tweaks, so that larchbuild, larchin and other users can manage
them easily.

I may want to consider built-in support for persistent data storage
(separate from the session saving), e.g. by supporting a '/data'
folder, possibly sym-linked from home folders, e.g.
   /home/user/DATA -> /data/user
This data folder would not be in tmpfs, but on flash memory or disk.
Note that if the same partition is used for the larch system and this
persistent data area, the partition must be mounted rw, which might
be undesirable. It would also add some complication to the live larch
scripts.



larchin
=======

Modify to handle the new larch approach to booting and script replacement.

BUT also try to get new design a bit further. It seems quite a bit cleaner
and should be more interactive (uses a separate thread for interfacing
to the installation routines).

Of course I would probably use a similar interface to larch now, using
pipes to communicate with a pyqt gui.


long-term
.........

LVM and RAID, but I must say I am not really convinced that they should get
in. Ideally larchin's design would allow plug-ins to be developed easily.

